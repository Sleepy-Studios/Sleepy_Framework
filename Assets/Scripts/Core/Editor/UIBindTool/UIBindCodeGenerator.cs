using System.Collections.Generic;
using System.IO;
using System.Text;
using UnityEditor;
using UnityEditor.SceneManagement;
using UnityEngine;

namespace Core.Editor.UIBindTool
{
    public static class UIBindCodeGenerator
    {
        public static void GenerateCode(GameObject prefab, string namespaceName, string moduleName, string viewName, string outputPath, Dictionary<GameObject, List<Component>> selectedComponents)
        {
            if (prefab == null || selectedComponents.Count == 0)
                return;

            // 确保视图名以View结尾
            if (!viewName.EndsWith("View"))
            {
                viewName += "View";
            }

            string moduleFolder = string.IsNullOrEmpty(moduleName) ? "" : moduleName + "/";
            string viewFolder = viewName.Replace("View", "") + "/";
            string fullOutputPath = Path.Combine(outputPath, moduleFolder, viewFolder, "View");

            // 确保输出目录存在
            Directory.CreateDirectory(fullOutputPath);

            // 生成ViewComponent文件
            GenerateViewComponentFile(prefab, namespaceName, viewName, fullOutputPath, selectedComponents);

            // 生成View文件（如果不存在）
            GenerateViewFile(namespaceName, moduleName, viewName, fullOutputPath);

            AssetDatabase.Refresh();
        }

        private static void GenerateViewComponentFile(GameObject prefab, string namespaceName, string viewName, string outputPath, Dictionary<GameObject, List<Component>> selectedComponents)
        {
            string filePath = Path.Combine(outputPath, viewName + "Component.cs");

            StringBuilder sb = new StringBuilder();

            // 添加文件头
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine("// <auto-generated>");
            sb.AppendLine("//     此代码由UI绑定工具自动生成，请勿手动修改");
            sb.AppendLine("// </auto-generated>");
            sb.AppendLine("//------------------------------------------------------------------------------");
            sb.AppendLine();

            // 只添加必要命名空间引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using Core;");
            sb.AppendLine();

            // 获取预制体的资源路径作为SourceAttribute
            var prefabStage = PrefabStageUtility.GetCurrentPrefabStage();
            string prefabPath = prefabStage.assetPath;
            string sourcePath = prefabPath.Replace(".prefab", "");

            // 添加命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            
            // 添加SourceAttribute
            sb.AppendLine($"    [SourceAttribute(\"{sourcePath}\")]");
            sb.AppendLine($"    public partial class {viewName}");
            sb.AppendLine("    {");

            // 添加ComponentItemKey字段
            sb.AppendLine("        ComponentItemKey _componentItemKey;");
            sb.AppendLine();

            // 添加组件字段
            GenerateComponentFields(sb, selectedComponents);

            sb.AppendLine();

            // 添加ComponentItemKey属性访问器
            sb.AppendLine("        protected ComponentItemKey componentItemKey");
            sb.AppendLine("        {");
            sb.AppendLine("            get");
            sb.AppendLine("            {");
            sb.AppendLine("                if(_componentItemKey == null)");
            sb.AppendLine("                    _componentItemKey = transform.GetComponent<ComponentItemKey>();");
            sb.AppendLine("                return _componentItemKey;");
            sb.AppendLine("            }");
            sb.AppendLine("        }");
            sb.AppendLine();

            // 添加组件属性访问器
            GenerateComponentProperties(sb, selectedComponents);

            // 添加ReleaseComponent方法
            GenerateReleaseMethod(sb, selectedComponents);

            sb.AppendLine("    }");
            sb.AppendLine("}");

            // 写入文件
            File.WriteAllText(filePath, sb.ToString());
            Debug.LogWarning($"【UI绑定工具】已生成ViewComponent文件: {filePath}");
        }

        // 生成组件字段
        private static void GenerateComponentFields(StringBuilder sb, Dictionary<GameObject, List<Component>> selectedComponents)
        {
            foreach (var entry in selectedComponents)
            {
                GameObject gameObject = entry.Key;
                List<Component> components = entry.Value;

                foreach (var component in components)
                {
                    if (component == null) continue;

                    string gameObjectName = SanitizeVariableName(gameObject.name);
                    string componentType = component.GetType().Name;
                    string fullTypeName = GetFullTypeName(component.GetType());

                    // 使用完整类型名和类型_名称作为变量名格式
                    sb.AppendLine($"        private {fullTypeName} _{componentType}_{gameObjectName};");
                }
            }
        }

        // 生成组件属性访问器
        private static void GenerateComponentProperties(StringBuilder sb, Dictionary<GameObject, List<Component>> selectedComponents)
        {
            foreach (var entry in selectedComponents)
            {
                GameObject gameObject = entry.Key;
                List<Component> components = entry.Value;

                foreach (var component in components)
                {
                    if (component == null) continue;

                    string gameObjectName = SanitizeVariableName(gameObject.name);
                    string componentType = component.GetType().Name;
                    string fullTypeName = GetFullTypeName(component.GetType());
                    string propertyName = $"{componentType}_{gameObjectName}";
                    string fieldName = $"_{propertyName}";

                    // 使用组件的完全限定类型名
                    sb.AppendLine($"        public {fullTypeName} {propertyName}");
                    sb.AppendLine("        {");
                    sb.AppendLine("            get");
                    sb.AppendLine("            {");
                    sb.AppendLine($"                if({fieldName} == null)");
                    sb.AppendLine($"                    {fieldName} = componentItemKey.GetObject<{fullTypeName}>(\"{propertyName}\");");
                    sb.AppendLine($"                return {fieldName};");
                    sb.AppendLine("            }");
                    sb.AppendLine("        }");
                    sb.AppendLine();
                }
            }
        }

        // 生成释放组件方法
        private static void GenerateReleaseMethod(StringBuilder sb, Dictionary<GameObject, List<Component>> selectedComponents)
        {
            sb.AppendLine("        protected virtual void ReleaseComponent()");
            sb.AppendLine("        {");
            
            // 添加释放组件代码
            foreach (var entry in selectedComponents)
            {
                GameObject gameObject = entry.Key;
                List<Component> components = entry.Value;

                foreach (var component in components)
                {
                    if (component == null) continue;

                    string gameObjectName = SanitizeVariableName(gameObject.name);
                    string componentType = component.GetType().Name;
                    string fieldName = $"_{componentType}_{gameObjectName}";

                    sb.AppendLine($"            {fieldName} = null;");
                }
            }
            
            sb.AppendLine("            _componentItemKey = null;");
            sb.AppendLine("        }");
        }

        private static void GenerateViewFile(string namespaceName, string moduleName, string viewName, string outputPath)
        {
            string filePath = Path.Combine(outputPath, viewName + ".cs");

            // 如果文件已存在，则跳过生成
            if (File.Exists(filePath))
            {
                Debug.Log($"View文件已存在，跳过生成: {filePath}");
                return;
            }

            StringBuilder sb = new StringBuilder();

            // 添加命名空间引用
            sb.AppendLine("using UnityEngine;");
            sb.AppendLine("using Core;");
            sb.AppendLine();

            // 添加命名空间
            sb.AppendLine($"namespace {namespaceName}");
            sb.AppendLine("{");
            sb.AppendLine($"    public partial class {viewName} : MonoBehaviour");
            sb.AppendLine("    {");
            sb.AppendLine("        private void Awake()");
            sb.AppendLine("        {");
            sb.AppendLine("            // 初始化组件");
            sb.AppendLine("        }");
            sb.AppendLine("        ");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            // 写入文件
            File.WriteAllText(filePath, sb.ToString());
            Debug.LogWarning($"【UI绑定工具】已生成View文件: {filePath}");
        }

        // 将变量名转换为合法的C#变量名
        public static string SanitizeVariableName(string name) // Changed to public
        {
            // 替换空格和特殊字符，包括括号
            string sanitized = name.Replace(" ", "_")
                .Replace("-", "_")
                .Replace(".", "_")
                .Replace("(", "_")
                .Replace(")", "_");
            
            // 确保首字母小写
            if (sanitized.Length > 0 && char.IsUpper(sanitized[0]))
            {
                sanitized = char.ToLower(sanitized[0]) + sanitized.Substring(1);
            }
            
            // 确保变量名不以数字开头
            if (sanitized.Length > 0 && char.IsDigit(sanitized[0]))
            {
                sanitized = "_" + sanitized;
            }
            
            return sanitized;
        }

        // 获取类型的完整名称（包含命名空间）
        private static string GetFullTypeName(System.Type type)
        {
            string typeName = type.Name;
            string typeNamespace = type.Namespace;
            if (!string.IsNullOrEmpty(typeNamespace))
            {
                    return $"{typeNamespace}.{typeName}";
            }
            return typeName;
        }
    }
}
